# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - dev

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 20
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '20'
          cache: gradle

      - name: Grant Gradle wrapper exec permission
        run: chmod +x ./gradlew

      - name: Create application-dev.yml
        # secrets.APPLICATION_DEV_YML 에 와일드카드를 실제 개행문자로 포함한 YAML 문자열을 넣어두세요.
        run: echo "${{ secrets.APPLICATION_DEV_YML }}" > src/main/resources/application-dev.yml

      - name: Build JAR
        run: ./gradlew clean bootJar -x test -Dspring.profiles.active=dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.IMAGE_NAME }}:dev
            ${{ secrets.IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}       # SSH 키를 시크릿에 넣어두세요
          port: ${{ secrets.SERVER_PORT }}        # 예: 22
          script: |
            set -e
            IMAGE=${{ secrets.IMAGE_NAME }}:dev
            CONTAINER="my-spring-app-dev"
            PORT=8080

            echo "Pulling ${IMAGE}..."
            docker pull $IMAGE

            echo "Stopping & removing existing container..."
            docker rm -f $CONTAINER 2>/dev/null || true

            echo "Starting new container..."
            docker run -d \
              --name $CONTAINER \
              -p ${PORT}:8080 \
              -e SPRING_PROFILES_ACTIVE=dev \
              -v /etc/localtime:/etc/localtime:ro \
              $IMAGE

            echo "Pruning dangling images..."
            docker image prune -f
